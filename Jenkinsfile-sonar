pipeline {
    agent {
        label 'maven'
    }
    environment {
        sonar_username = credentials('sonar_db_username')
        sonar_password = credentials('sonar_db_password')
        sonar_database = credentials('sonar_db_database')
        sonar_db_ip    = '10.138.0.17'
    }
    stages {
        stage('SCM') {
            steps {
                git branch: 'main', credentialsId: 'github-ssh', url: 'git@github.com:Vladkarok/Geocit134.git'
            }
        }
        stage('build') {
            steps {
                withMaven(maven:'3.6.3') {
                    sh '''#!/bin/bash
                        find src/test/java/com/softserveinc/geocitizen -type f -exec sed -i "s/@Ignore//g" {} +  
                        sed -i -E \\
                            "s/(db.username=postgres)/db.username=${sonar_username}/g;
                            s/(db.password=postgres)/db.password=${sonar_password}/g;
                            s/(postgresql:\\/\\/localhost)/postgresql:\\/\\/${sonar_db_ip}/g
                            s/(ss_demo_1)$/${sonar_database}/g;" src/main/resources/application.properties
                        mvn clean verify
                        '''
                }
            }
        }
        stage('SonarQube analysis') {
            steps {
                withSonarQubeEnv('MySonarQube') {
                    withMaven(maven:'3.6.3') {
                        sh 'mvn sonar:sonar'
                    }
                }
            }
        }
        stage("Quality Gate") {
            steps {
                script {
                    try {
                        timeout(time: 1, unit: 'HOURS') {
                            waitForQualityGate abortPipeline: true
                        }
                    } catch (err) {
                        echo "Caught: ${err}"
                        currentBuild.result = "FAILED"
                        throw err
                    } finally {
                        notifyBuild(currentBuild.result)
                    }
                }
            }
        }
    }
    post {
        always {
            cleanWs()
        }
    }  
}
def notifyBuild(String buildStatus = 'STARTED') {
    // build status of null means successful
    buildStatus =  buildStatus ?: 'SUCCESSFUL'

    // Default values
    def colorName = 'RED'
    def colorCode = '#FF0000'
    def subject = "${buildStatus}: Job '${env.JOB_NAME} [${env.BUILD_NUMBER}]'"
    def summary = "${subject} (${env.BUILD_URL}) (${currentBuild.durationString})"

    // Override default values based on build status
    if (buildStatus == 'STARTED') {
        color = 'YELLOW'
        colorCode = '#FFFF00'
    } else if (buildStatus == 'SUCCESSFUL') {
        color = 'GREEN'
        colorCode = '#00FF00'
    } else {
        color = 'RED'
        colorCode = '#FF0000'
    }

    // Send notifications
    slackSend (color: colorCode, message: summary)
}
