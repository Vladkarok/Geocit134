pipeline {
    
    agent {
        label 'docker'
    }

    environment {
        db_user             = credentials('db_user')
        db_password         = credentials('db_password')
        db_name             = credentials('db_name')
        imageName           = "ss_postgres"
        registryCredentials = "geo-docker"
        registry            = "nexus.vladkarok.ml:5000"
        dockerImage         = ''
        postgres_core_image = "12-bullseye"
    }

    stages {
    
        stage ('Clean WS') {
            steps {
                // clean current workspace directory
                cleanWs()

            }
        }

        stage ('Clone Geo Citizen project') {
            steps {             
                git branch: 'docker', credentialsId: 'github-ssh', url: 'git@github.com:Vladkarok/Geocit134.git'
            }
        }      
        
        stage ('Fixing Dockerfile') {
            steps {
                // fix Dockerfile
                script{
                    sh '''#!/bin/bash
                    #################################################
                    ### Set the environment variables
                    #################################################
                    
                    s_db_user=${db_user}
                    s_db_password=${db_password}
                    s_db_name=${db_name}
                    pg_version=$(postgres_core_image)
                    ##################Adjusting Dockerfile###############################
                    sed -i -E \\
                                "s/(VERSION)/${pg_version}/g; \\
                                s/(POSTGRESQL_USER)/${s_db_user}/g;
                                s/(POSTGRESQL_PASSWORD)/${s_db_password}/g;
                                s/(POSTGRESQL_DB)/${db_name}/g;" Dockerfile
                    '''
                }
                
            }
        }

        stage('Building image') {
            steps{
                script {
                    dockerImage = docker.build imageName
                }
            }
        }

        stage('Deploy Image') {
            steps{
                script {
                    docker.withRegistry( 'http://'+registry, registryCredentials ) {
                        dockerImage.push("${env.BUILD_NUMBER}")
                        dockerImage.push('latest')
                    }
                }
            }
        }

        stage('Remove Unused docker image') {
            steps{
                sh "docker rmi -f $registry/$imageName:${env.BUILD_NUMBER}"
                sh "docker rmi -f $imageName:latest"
                sh "docker rmi -f $registry/$imageName:latest"
            }
        }
    }
}